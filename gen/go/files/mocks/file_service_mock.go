// Code generated by MockGen. DO NOT EDIT.
// Source: file_service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=file_service_grpc.pb.go -destination=./mocks/file_service_mock.go
//

// Package mock_files_pb is a generated GoMock package.
package mock_files_pb

import (
	context "context"
	reflect "reflect"

	files_pb "github.com/reversersed/LitGO-proto/gen/go/files"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFileClient is a mock of FileClient interface.
type MockFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileClientMockRecorder
	isgomock struct{}
}

// MockFileClientMockRecorder is the mock recorder for MockFileClient.
type MockFileClientMockRecorder struct {
	mock *MockFileClient
}

// NewMockFileClient creates a new mock instance.
func NewMockFileClient(ctrl *gomock.Controller) *MockFileClient {
	mock := &MockFileClient{ctrl: ctrl}
	mock.recorder = &MockFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileClient) EXPECT() *MockFileClientMockRecorder {
	return m.recorder
}

// GetBookCover mocks base method.
func (m *MockFileClient) GetBookCover(ctx context.Context, in *files_pb.FileRequest, opts ...grpc.CallOption) (*files_pb.FileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookCover", varargs...)
	ret0, _ := ret[0].(*files_pb.FileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookCover indicates an expected call of GetBookCover.
func (mr *MockFileClientMockRecorder) GetBookCover(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookCover", reflect.TypeOf((*MockFileClient)(nil).GetBookCover), varargs...)
}

// GetBookFile mocks base method.
func (m *MockFileClient) GetBookFile(ctx context.Context, in *files_pb.FileRequest, opts ...grpc.CallOption) (*files_pb.FileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookFile", varargs...)
	ret0, _ := ret[0].(*files_pb.FileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookFile indicates an expected call of GetBookFile.
func (mr *MockFileClientMockRecorder) GetBookFile(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookFile", reflect.TypeOf((*MockFileClient)(nil).GetBookFile), varargs...)
}

// MockFileServer is a mock of FileServer interface.
type MockFileServer struct {
	ctrl     *gomock.Controller
	recorder *MockFileServerMockRecorder
	isgomock struct{}
}

// MockFileServerMockRecorder is the mock recorder for MockFileServer.
type MockFileServerMockRecorder struct {
	mock *MockFileServer
}

// NewMockFileServer creates a new mock instance.
func NewMockFileServer(ctrl *gomock.Controller) *MockFileServer {
	mock := &MockFileServer{ctrl: ctrl}
	mock.recorder = &MockFileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServer) EXPECT() *MockFileServerMockRecorder {
	return m.recorder
}

// GetBookCover mocks base method.
func (m *MockFileServer) GetBookCover(arg0 context.Context, arg1 *files_pb.FileRequest) (*files_pb.FileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookCover", arg0, arg1)
	ret0, _ := ret[0].(*files_pb.FileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookCover indicates an expected call of GetBookCover.
func (mr *MockFileServerMockRecorder) GetBookCover(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookCover", reflect.TypeOf((*MockFileServer)(nil).GetBookCover), arg0, arg1)
}

// GetBookFile mocks base method.
func (m *MockFileServer) GetBookFile(arg0 context.Context, arg1 *files_pb.FileRequest) (*files_pb.FileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookFile", arg0, arg1)
	ret0, _ := ret[0].(*files_pb.FileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookFile indicates an expected call of GetBookFile.
func (mr *MockFileServerMockRecorder) GetBookFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookFile", reflect.TypeOf((*MockFileServer)(nil).GetBookFile), arg0, arg1)
}

// mustEmbedUnimplementedFileServer mocks base method.
func (m *MockFileServer) mustEmbedUnimplementedFileServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFileServer")
}

// mustEmbedUnimplementedFileServer indicates an expected call of mustEmbedUnimplementedFileServer.
func (mr *MockFileServerMockRecorder) mustEmbedUnimplementedFileServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFileServer", reflect.TypeOf((*MockFileServer)(nil).mustEmbedUnimplementedFileServer))
}

// MockUnsafeFileServer is a mock of UnsafeFileServer interface.
type MockUnsafeFileServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFileServerMockRecorder
	isgomock struct{}
}

// MockUnsafeFileServerMockRecorder is the mock recorder for MockUnsafeFileServer.
type MockUnsafeFileServerMockRecorder struct {
	mock *MockUnsafeFileServer
}

// NewMockUnsafeFileServer creates a new mock instance.
func NewMockUnsafeFileServer(ctrl *gomock.Controller) *MockUnsafeFileServer {
	mock := &MockUnsafeFileServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFileServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFileServer) EXPECT() *MockUnsafeFileServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFileServer mocks base method.
func (m *MockUnsafeFileServer) mustEmbedUnimplementedFileServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFileServer")
}

// mustEmbedUnimplementedFileServer indicates an expected call of mustEmbedUnimplementedFileServer.
func (mr *MockUnsafeFileServerMockRecorder) mustEmbedUnimplementedFileServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFileServer", reflect.TypeOf((*MockUnsafeFileServer)(nil).mustEmbedUnimplementedFileServer))
}
