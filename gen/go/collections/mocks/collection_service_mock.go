// Code generated by MockGen. DO NOT EDIT.
// Source: collection_service_grpc.pb.go

// Package mock_collections_pb is a generated GoMock package.
package mock_collections_pb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCollectionClient is a mock of CollectionClient interface.
type MockCollectionClient struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionClientMockRecorder
}

// MockCollectionClientMockRecorder is the mock recorder for MockCollectionClient.
type MockCollectionClientMockRecorder struct {
	mock *MockCollectionClient
}

// NewMockCollectionClient creates a new mock instance.
func NewMockCollectionClient(ctrl *gomock.Controller) *MockCollectionClient {
	mock := &MockCollectionClient{ctrl: ctrl}
	mock.recorder = &MockCollectionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionClient) EXPECT() *MockCollectionClientMockRecorder {
	return m.recorder
}

// MockCollectionServer is a mock of CollectionServer interface.
type MockCollectionServer struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionServerMockRecorder
}

// MockCollectionServerMockRecorder is the mock recorder for MockCollectionServer.
type MockCollectionServerMockRecorder struct {
	mock *MockCollectionServer
}

// NewMockCollectionServer creates a new mock instance.
func NewMockCollectionServer(ctrl *gomock.Controller) *MockCollectionServer {
	mock := &MockCollectionServer{ctrl: ctrl}
	mock.recorder = &MockCollectionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionServer) EXPECT() *MockCollectionServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCollectionServer mocks base method.
func (m *MockCollectionServer) mustEmbedUnimplementedCollectionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCollectionServer")
}

// mustEmbedUnimplementedCollectionServer indicates an expected call of mustEmbedUnimplementedCollectionServer.
func (mr *MockCollectionServerMockRecorder) mustEmbedUnimplementedCollectionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCollectionServer", reflect.TypeOf((*MockCollectionServer)(nil).mustEmbedUnimplementedCollectionServer))
}

// MockUnsafeCollectionServer is a mock of UnsafeCollectionServer interface.
type MockUnsafeCollectionServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCollectionServerMockRecorder
}

// MockUnsafeCollectionServerMockRecorder is the mock recorder for MockUnsafeCollectionServer.
type MockUnsafeCollectionServerMockRecorder struct {
	mock *MockUnsafeCollectionServer
}

// NewMockUnsafeCollectionServer creates a new mock instance.
func NewMockUnsafeCollectionServer(ctrl *gomock.Controller) *MockUnsafeCollectionServer {
	mock := &MockUnsafeCollectionServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCollectionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCollectionServer) EXPECT() *MockUnsafeCollectionServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCollectionServer mocks base method.
func (m *MockUnsafeCollectionServer) mustEmbedUnimplementedCollectionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCollectionServer")
}

// mustEmbedUnimplementedCollectionServer indicates an expected call of mustEmbedUnimplementedCollectionServer.
func (mr *MockUnsafeCollectionServerMockRecorder) mustEmbedUnimplementedCollectionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCollectionServer", reflect.TypeOf((*MockUnsafeCollectionServer)(nil).mustEmbedUnimplementedCollectionServer))
}
