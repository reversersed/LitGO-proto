// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: reviews/review_service.proto

package reviews_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Review_CreateBookReview_FullMethodName = "/reviews.Review/CreateBookReview"
	Review_GetBookReviews_FullMethodName   = "/reviews.Review/GetBookReviews"
)

// ReviewClient is the client API for Review service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
//go:generate mockgen -source=review_service_grpc.pb.go -destination=./mocks/review_service_mock.go
type ReviewClient interface {
	CreateBookReview(ctx context.Context, in *CreateBookReviewRequest, opts ...grpc.CallOption) (*CreateBookReviewResponse, error)
	GetBookReviews(ctx context.Context, in *GetBookReviewsRequest, opts ...grpc.CallOption) (*GetBookReviewsResponse, error)
}

type reviewClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewClient(cc grpc.ClientConnInterface) ReviewClient {
	return &reviewClient{cc}
}

func (c *reviewClient) CreateBookReview(ctx context.Context, in *CreateBookReviewRequest, opts ...grpc.CallOption) (*CreateBookReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBookReviewResponse)
	err := c.cc.Invoke(ctx, Review_CreateBookReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) GetBookReviews(ctx context.Context, in *GetBookReviewsRequest, opts ...grpc.CallOption) (*GetBookReviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookReviewsResponse)
	err := c.cc.Invoke(ctx, Review_GetBookReviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewServer is the server API for Review service.
// All implementations must embed UnimplementedReviewServer
// for forward compatibility.
//
//go:generate mockgen -source=review_service_grpc.pb.go -destination=./mocks/review_service_mock.go
type ReviewServer interface {
	CreateBookReview(context.Context, *CreateBookReviewRequest) (*CreateBookReviewResponse, error)
	GetBookReviews(context.Context, *GetBookReviewsRequest) (*GetBookReviewsResponse, error)
	mustEmbedUnimplementedReviewServer()
}

// UnimplementedReviewServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReviewServer struct{}

func (UnimplementedReviewServer) CreateBookReview(context.Context, *CreateBookReviewRequest) (*CreateBookReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBookReview not implemented")
}
func (UnimplementedReviewServer) GetBookReviews(context.Context, *GetBookReviewsRequest) (*GetBookReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookReviews not implemented")
}
func (UnimplementedReviewServer) mustEmbedUnimplementedReviewServer() {}
func (UnimplementedReviewServer) testEmbeddedByValue()                {}

// UnsafeReviewServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewServer will
// result in compilation errors.
type UnsafeReviewServer interface {
	mustEmbedUnimplementedReviewServer()
}

func RegisterReviewServer(s grpc.ServiceRegistrar, srv ReviewServer) {
	// If the following call pancis, it indicates UnimplementedReviewServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Review_ServiceDesc, srv)
}

func _Review_CreateBookReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).CreateBookReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Review_CreateBookReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).CreateBookReview(ctx, req.(*CreateBookReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_GetBookReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).GetBookReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Review_GetBookReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).GetBookReviews(ctx, req.(*GetBookReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Review_ServiceDesc is the grpc.ServiceDesc for Review service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Review_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reviews.Review",
	HandlerType: (*ReviewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBookReview",
			Handler:    _Review_CreateBookReview_Handler,
		},
		{
			MethodName: "GetBookReviews",
			Handler:    _Review_GetBookReviews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reviews/review_service.proto",
}
