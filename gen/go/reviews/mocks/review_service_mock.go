// Code generated by MockGen. DO NOT EDIT.
// Source: review_service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=review_service_grpc.pb.go -destination=./mocks/review_service_mock.go
//

// Package mock_reviews_pb is a generated GoMock package.
package mock_reviews_pb

import (
	context "context"
	reflect "reflect"

	reviews "github.com/reversersed/LitGO-proto/gen/go/reviews"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockReviewClient is a mock of ReviewClient interface.
type MockReviewClient struct {
	ctrl     *gomock.Controller
	recorder *MockReviewClientMockRecorder
	isgomock struct{}
}

// MockReviewClientMockRecorder is the mock recorder for MockReviewClient.
type MockReviewClientMockRecorder struct {
	mock *MockReviewClient
}

// NewMockReviewClient creates a new mock instance.
func NewMockReviewClient(ctrl *gomock.Controller) *MockReviewClient {
	mock := &MockReviewClient{ctrl: ctrl}
	mock.recorder = &MockReviewClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewClient) EXPECT() *MockReviewClientMockRecorder {
	return m.recorder
}

// CreateBookReview mocks base method.
func (m *MockReviewClient) CreateBookReview(ctx context.Context, in *reviews.CreateBookReviewRequest, opts ...grpc.CallOption) (*reviews.CreateBookReviewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBookReview", varargs...)
	ret0, _ := ret[0].(*reviews.CreateBookReviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookReview indicates an expected call of CreateBookReview.
func (mr *MockReviewClientMockRecorder) CreateBookReview(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookReview", reflect.TypeOf((*MockReviewClient)(nil).CreateBookReview), varargs...)
}

// GetBookReviews mocks base method.
func (m *MockReviewClient) GetBookReviews(ctx context.Context, in *reviews.GetBookReviewsRequest, opts ...grpc.CallOption) (*reviews.GetBookReviewsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookReviews", varargs...)
	ret0, _ := ret[0].(*reviews.GetBookReviewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookReviews indicates an expected call of GetBookReviews.
func (mr *MockReviewClientMockRecorder) GetBookReviews(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookReviews", reflect.TypeOf((*MockReviewClient)(nil).GetBookReviews), varargs...)
}

// MockReviewServer is a mock of ReviewServer interface.
type MockReviewServer struct {
	ctrl     *gomock.Controller
	recorder *MockReviewServerMockRecorder
	isgomock struct{}
}

// MockReviewServerMockRecorder is the mock recorder for MockReviewServer.
type MockReviewServerMockRecorder struct {
	mock *MockReviewServer
}

// NewMockReviewServer creates a new mock instance.
func NewMockReviewServer(ctrl *gomock.Controller) *MockReviewServer {
	mock := &MockReviewServer{ctrl: ctrl}
	mock.recorder = &MockReviewServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewServer) EXPECT() *MockReviewServerMockRecorder {
	return m.recorder
}

// CreateBookReview mocks base method.
func (m *MockReviewServer) CreateBookReview(arg0 context.Context, arg1 *reviews.CreateBookReviewRequest) (*reviews.CreateBookReviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookReview", arg0, arg1)
	ret0, _ := ret[0].(*reviews.CreateBookReviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookReview indicates an expected call of CreateBookReview.
func (mr *MockReviewServerMockRecorder) CreateBookReview(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookReview", reflect.TypeOf((*MockReviewServer)(nil).CreateBookReview), arg0, arg1)
}

// GetBookReviews mocks base method.
func (m *MockReviewServer) GetBookReviews(arg0 context.Context, arg1 *reviews.GetBookReviewsRequest) (*reviews.GetBookReviewsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookReviews", arg0, arg1)
	ret0, _ := ret[0].(*reviews.GetBookReviewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookReviews indicates an expected call of GetBookReviews.
func (mr *MockReviewServerMockRecorder) GetBookReviews(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookReviews", reflect.TypeOf((*MockReviewServer)(nil).GetBookReviews), arg0, arg1)
}

// mustEmbedUnimplementedReviewServer mocks base method.
func (m *MockReviewServer) mustEmbedUnimplementedReviewServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedReviewServer")
}

// mustEmbedUnimplementedReviewServer indicates an expected call of mustEmbedUnimplementedReviewServer.
func (mr *MockReviewServerMockRecorder) mustEmbedUnimplementedReviewServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedReviewServer", reflect.TypeOf((*MockReviewServer)(nil).mustEmbedUnimplementedReviewServer))
}

// MockUnsafeReviewServer is a mock of UnsafeReviewServer interface.
type MockUnsafeReviewServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeReviewServerMockRecorder
	isgomock struct{}
}

// MockUnsafeReviewServerMockRecorder is the mock recorder for MockUnsafeReviewServer.
type MockUnsafeReviewServerMockRecorder struct {
	mock *MockUnsafeReviewServer
}

// NewMockUnsafeReviewServer creates a new mock instance.
func NewMockUnsafeReviewServer(ctrl *gomock.Controller) *MockUnsafeReviewServer {
	mock := &MockUnsafeReviewServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeReviewServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeReviewServer) EXPECT() *MockUnsafeReviewServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedReviewServer mocks base method.
func (m *MockUnsafeReviewServer) mustEmbedUnimplementedReviewServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedReviewServer")
}

// mustEmbedUnimplementedReviewServer indicates an expected call of mustEmbedUnimplementedReviewServer.
func (mr *MockUnsafeReviewServerMockRecorder) mustEmbedUnimplementedReviewServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedReviewServer", reflect.TypeOf((*MockUnsafeReviewServer)(nil).mustEmbedUnimplementedReviewServer))
}
