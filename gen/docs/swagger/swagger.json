{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API specification for LitGO API ecosystem",
    "title": "LitGO API Swagger Scheme",
    "version": "1.0.0"
  },
  "paths": {
    "/api/v1/authors": {
      "get": {
        "description": "Get authors by id or translit name. Can be multiple",
        "tags": [
          "Author"
        ],
        "summary": "Find authors",
        "operationId": "Author_GetAuthors",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "array of authors id to find\n\n@gotags: form:\"id\" validate:\"primitiveid,required_without_all=Translit\"",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "array of translit names to find\n\n@gotags: form:\"translit\" validate:\"required_without_all=Id\"",
            "name": "translit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authorsGetAuthorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/authors/list": {
      "get": {
        "description": "Get authors by query with pagination",
        "tags": [
          "Author"
        ],
        "summary": "Find authors list",
        "operationId": "Author_FindAuthors",
        "parameters": [
          {
            "type": "string",
            "description": "query to find\n\n@gotags: form:\"query\" validate:\"required\"",
            "name": "query",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "max objects to find\n\n@gotags: form:\"limit\" validate:\"required,gte=1,lte=50\"",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "page to find\n\n@gotags: form:\"page\" validate:\"gte=0\"",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "format": "float",
            "description": "rating to find\n\n@gotags: form:\"rating\" validate:\"gte=0,lte=5\"",
            "name": "rating",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authorsGetAuthorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/book": {
      "get": {
        "description": "Gets book by id or translit name",
        "tags": [
          "Book"
        ],
        "summary": "Get book by id",
        "operationId": "Book_GetBook",
        "parameters": [
          {
            "type": "string",
            "description": "book's translit name or id to find\n\n@gotags: form:\"query\" validate:\"required\"",
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/booksGetBookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Create new book. Accessible only for authorized users with admin rights.",
        "tags": [
          "Book"
        ],
        "summary": "Create book",
        "operationId": "Book_CreateBook",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/booksCreateBookRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/booksCreateBookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/book/find": {
      "get": {
        "description": "Searches books by query with pagination",
        "tags": [
          "Book"
        ],
        "summary": "Find book by query",
        "operationId": "Book_FindBook",
        "parameters": [
          {
            "type": "string",
            "description": "query to find\n\n@gotags: form:\"query\" validate:\"max=128\"",
            "name": "query",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "max objects to find\n\n@gotags: form:\"limit\" validate:\"required,gte=1,lte=50\"",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "page to find\n\n@gotags: form:\"page\" validate:\"gte=0\"",
            "name": "page",
            "in": "query"
          },
          {
            "type": "number",
            "format": "float",
            "description": "minimum rating to find\n\n@gotags: form:\"rating\" validate:\"gte=0,lte=5\"",
            "name": "rating",
            "in": "query"
          },
          {
            "type": "string",
            "description": "@gotags: form:\"sorttype\" validate:\"oneof=Popular Newest\"",
            "name": "sorttype",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/booksFindBookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/book/genre": {
      "get": {
        "description": "Gets book by genre id or translit name with pagination",
        "tags": [
          "Book"
        ],
        "summary": "Get book by genre",
        "operationId": "Book_GetBookByGenre",
        "parameters": [
          {
            "type": "string",
            "description": "Query can be translit name or genre id\n\n@gotags: form:\"query\" validate:\"required\"",
            "name": "query",
            "in": "query"
          },
          {
            "type": "string",
            "description": "@gotags: form:\"sorttype\" validate:\"oneof=Popular Newest\"",
            "name": "sorttype",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "@gotags: form:\"onlyhighrating\"",
            "name": "onlyhighrating",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "@gotags: form:\"limit\" validate:\"gte=1,lte=50\"",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "@gotags: form:\"page\" validate:\"gte=0\"",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/booksGetBookByGenreResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/book/list": {
      "get": {
        "description": "Get authors by query with pagination",
        "tags": [
          "Book"
        ],
        "summary": "Find authors list",
        "operationId": "Book_GetBookList",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "array of authors id to find\n\n@gotags: form:\"id\" validate:\"primitiveid,required_without_all=Translit\"",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "array of translit names to find\n\n@gotags: form:\"translit\" validate:\"required_without_all=Id\"",
            "name": "translit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/booksGetBookListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/files/book": {
      "get": {
        "description": "Returns file's bytes if there is one",
        "tags": [
          "File"
        ],
        "summary": "Get's book's epub file",
        "operationId": "File_GetBookFile",
        "parameters": [
          {
            "type": "string",
            "description": "@gotags: validate:\"required\" example:\"bible-231125.epub\"\n\nName of file to find with extension",
            "name": "fileName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/filesFileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/files/cover": {
      "get": {
        "description": "Returns file's bytes if there is one",
        "tags": [
          "File"
        ],
        "summary": "Get's book cover's file",
        "operationId": "File_GetBookCover",
        "parameters": [
          {
            "type": "string",
            "description": "@gotags: validate:\"required\" example:\"bible-231125.epub\"\n\nName of file to find with extension",
            "name": "fileName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/filesFileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/genre": {
      "get": {
        "description": "Query can be hex id or translit name of category or genre",
        "tags": [
          "Genre"
        ],
        "summary": "Get category or genre by query",
        "operationId": "Genre_GetOneOf",
        "parameters": [
          {
            "type": "string",
            "description": "query to find. can be hex id or translit name\n\n@gotags: form:\"query\" validate:\"required\"",
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/genresGetCategoryOrGenreResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/genre/all": {
      "get": {
        "tags": [
          "Genre"
        ],
        "summary": "Get all categories and genres list",
        "operationId": "Genre_GetAll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/genresGetAllResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/genre/tree": {
      "get": {
        "description": "Search category by genre or category by id or translit name",
        "tags": [
          "Genre"
        ],
        "summary": "Get whole tree",
        "operationId": "Genre_GetTree",
        "parameters": [
          {
            "type": "string",
            "description": "query to find. can be hex id or translit name\n\n@gotags: form:\"query\" validate:\"required\"",
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/genresCategoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/review/book": {
      "post": {
        "tags": [
          "Review"
        ],
        "summary": "Adds new review to book",
        "operationId": "Review_CreateBookReview",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/reviewsCreateBookReviewRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/reviewsCreateBookReviewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/review/{id}": {
      "get": {
        "tags": [
          "Review"
        ],
        "summary": "Get reviews of book with provided {id}",
        "operationId": "Review_GetBookReviews",
        "parameters": [
          {
            "type": "string",
            "description": "Book ID to search reviews of\n\n@gotags: form:\"id\" validate:\"required,primitiveid\"",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Page number to search\n\n@gotags: form:\"page\" validate:\"gte=0\"",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Reviews count per page\n\n@gotags: form:\"pagesize\" validate:\"gte=1\"",
            "name": "pageSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/reviewsGetBookReviewsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "description": "Find user by provided id, login or email. Only one parameter at time allowed.",
        "tags": [
          "User"
        ],
        "summary": "Search user",
        "operationId": "User_GetUser",
        "parameters": [
          {
            "type": "string",
            "description": "@gotags: validate:\"primitiveid,required_without_all=Login Email\" form:\"id\"",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "@gotags: validate:\"onlyenglish,required_without_all=Id Email\" form:\"login\"",
            "name": "login",
            "in": "query"
          },
          {
            "type": "string",
            "description": "@gotags: validate:\"required_without_all=Id Login\" form:\"email\"",
            "name": "email",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/usersUserModel"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/users/auth": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns current user's credentials if there is one",
        "tags": [
          "User"
        ],
        "summary": "Authenticate user",
        "operationId": "User_Auth",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sharedEmpty"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sharedUserCredentials"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/users/login": {
      "post": {
        "description": "Log in user with provided credentials to get auth and refresh tokens",
        "tags": [
          "User"
        ],
        "summary": "Login user",
        "operationId": "User_Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/usersLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/usersLoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/users/logout": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Removes user cookies if user logged in",
        "tags": [
          "User"
        ],
        "summary": "Logout user",
        "operationId": "User_Logout",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sharedEmpty"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sharedEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/v1/users/register": {
      "post": {
        "description": "Creates user account with provided credentials and returns auth and refresh tokens to authorize.",
        "tags": [
          "User"
        ],
        "summary": "Register user",
        "operationId": "User_RegisterUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/usersRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/usersLoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "authorsAuthorModel": {
      "type": "object",
      "properties": {
        "about": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "profilepicture": {
          "type": "string"
        },
        "rating": {
          "type": "number",
          "format": "float"
        },
        "translitname": {
          "type": "string"
        }
      }
    },
    "authorsGetAuthorsResponse": {
      "type": "object",
      "title": "Responses",
      "properties": {
        "authors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/authorsAuthorModel"
          }
        }
      }
    },
    "booksBookModel": {
      "type": "object",
      "title": "Models",
      "properties": {
        "authors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/authorsAuthorModel"
          }
        },
        "category": {
          "$ref": "#/definitions/genresCategoryModel"
        },
        "description": {
          "type": "string"
        },
        "filepath": {
          "type": "string"
        },
        "genre": {
          "$ref": "#/definitions/genresGenreModel"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "pages": {
          "type": "integer",
          "format": "int32"
        },
        "picture": {
          "type": "string"
        },
        "price": {
          "type": "integer",
          "format": "int32"
        },
        "published": {
          "type": "string",
          "format": "int64"
        },
        "rating": {
          "type": "number",
          "format": "float"
        },
        "reviews": {
          "type": "integer",
          "format": "int32"
        },
        "translitname": {
          "type": "string"
        },
        "written": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "booksCreateBookRequest": {
      "type": "object",
      "properties": {
        "authors": {
          "description": "@gotags: validate:\"required,primitiveid\" form:\"Authors\"",
          "type": "array",
          "title": "authors primitive id, at least one required",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "@gotags: validate:\"required,min=16,max=1024\" form:\"Description\"",
          "type": "string",
          "title": "description, required, 16 \u003c= length \u003c= 1024"
        },
        "filepath": {
          "description": "@gotags: validate:\"required\" form:\"Book\"",
          "type": "string",
          "format": "byte",
          "title": "book file, required"
        },
        "genre": {
          "description": "@gotags: validate:\"required,primitiveid\" form:\"Genre\"",
          "type": "string",
          "title": "genre primitive id, required"
        },
        "name": {
          "description": "@gotags: validate:\"required,min=4,max=64\" form:\"Name\"",
          "type": "string",
          "title": "book name, required, 4 \u003c= length \u003c= 64"
        },
        "picture": {
          "description": "@gotags: validate:\"required\" form:\"Picture\"",
          "type": "string",
          "format": "byte",
          "title": "picture file, required"
        },
        "price": {
          "type": "integer",
          "format": "int32",
          "title": "@gotags: validate:\"required,gte=0\" form:\"Price\""
        }
      }
    },
    "booksCreateBookResponse": {
      "type": "object",
      "properties": {
        "book": {
          "$ref": "#/definitions/booksBookModel"
        }
      }
    },
    "booksFindBookResponse": {
      "type": "object",
      "title": "Responses",
      "properties": {
        "books": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/booksBookModel"
          }
        }
      }
    },
    "booksGetBookByGenreResponse": {
      "type": "object",
      "properties": {
        "books": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/booksBookModel"
          }
        }
      }
    },
    "booksGetBookListResponse": {
      "type": "object",
      "properties": {
        "books": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/booksBookModel"
          }
        }
      }
    },
    "booksGetBookResponse": {
      "type": "object",
      "properties": {
        "book": {
          "$ref": "#/definitions/booksBookModel"
        }
      }
    },
    "filesFileResponse": {
      "type": "object",
      "title": "Responses",
      "properties": {
        "file": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "genresCategoryModel": {
      "type": "object",
      "title": "Models",
      "properties": {
        "genres": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/genresGenreModel"
          }
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "translitname": {
          "type": "string"
        }
      }
    },
    "genresCategoryResponse": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/genresCategoryModel"
        }
      }
    },
    "genresGenreModel": {
      "type": "object",
      "properties": {
        "bookcount": {
          "type": "string",
          "format": "int64"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "translitname": {
          "type": "string"
        }
      }
    },
    "genresGetAllResponse": {
      "type": "object",
      "title": "Responses",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/genresCategoryModel"
          }
        }
      }
    },
    "genresGetCategoryOrGenreResponse": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/genresCategoryModel"
        },
        "genre": {
          "$ref": "#/definitions/genresGenreModel"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "reviewsCreateBookReviewRequest": {
      "type": "object",
      "properties": {
        "creatorId": {
          "type": "string",
          "title": "@gotags: validate:\"required,primitiveid\" swaggerignore:\"true\""
        },
        "modelId": {
          "type": "string",
          "title": "@gotags: form:\"ModelId\" validate:\"required,primitiveid\""
        },
        "rating": {
          "type": "number",
          "format": "float",
          "title": "@gotags: form:\"Rating\" validate:\"required,gte=0,lte=5\""
        },
        "text": {
          "type": "string",
          "title": "@gotags: form:\"Id\" validate:\"required\""
        }
      }
    },
    "reviewsCreateBookReviewResponse": {
      "type": "object",
      "properties": {
        "review": {
          "$ref": "#/definitions/reviewsReviewModel"
        }
      }
    },
    "reviewsGetBookReviewsResponse": {
      "type": "object",
      "title": "Responses",
      "properties": {
        "reviews": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/reviewsReviewModel"
          }
        }
      }
    },
    "reviewsReviewModel": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "int64"
        },
        "creator": {
          "$ref": "#/definitions/reviewsUserModel"
        },
        "downvotes": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string"
        },
        "rating": {
          "type": "number",
          "format": "float"
        },
        "text": {
          "type": "string"
        },
        "upvotes": {
          "type": "integer",
          "format": "int32"
        },
        "userAction": {
          "$ref": "#/definitions/reviewsUserActionEnum"
        }
      }
    },
    "reviewsUserActionEnum": {
      "type": "string",
      "title": "Models",
      "default": "noAction",
      "enum": [
        "noAction",
        "like",
        "dislike"
      ]
    },
    "reviewsUserModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "login": {
          "type": "string"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "sharedEmpty": {
      "type": "object"
    },
    "sharedUserCredentials": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "login": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "usersLoginRequest": {
      "type": "object",
      "title": "Requests",
      "properties": {
        "login": {
          "description": "Can be presented as login or email",
          "type": "string",
          "title": "@gotags: validate:\"required\" example:\"admin\""
        },
        "password": {
          "type": "string",
          "title": "@gotags: validate:\"required\" example:\"admin\""
        },
        "rememberMe": {
          "type": "boolean"
        }
      }
    },
    "usersLoginResponse": {
      "type": "object",
      "title": "Responses",
      "properties": {
        "id": {
          "type": "string"
        },
        "login": {
          "type": "string"
        },
        "refreshtoken": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "token": {
          "type": "string"
        }
      }
    },
    "usersRegistrationRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "@gotags: validate:\"required,email\""
        },
        "login": {
          "type": "string",
          "title": "@gotags: validate:\"required,min=4,max=16,onlyenglish\""
        },
        "password": {
          "type": "string",
          "title": "@gotags: validate:\"required,min=8,max=32,lowercase,uppercase,digitrequired,specialsymbol\""
        },
        "passwordRepeat": {
          "type": "string",
          "title": "@gotags: validate:\"required,eqfield=Password\""
        },
        "rememberMe": {
          "type": "boolean"
        }
      }
    },
    "usersTokenReply": {
      "type": "object",
      "properties": {
        "refreshtoken": {
          "type": "string",
          "title": "@gotags: example:\"refresh token\""
        },
        "token": {
          "type": "string",
          "title": "@gotags: example:\"token\""
        }
      }
    },
    "usersUserModel": {
      "type": "object",
      "title": "Models",
      "properties": {
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "login": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "name": "Genre"
    },
    {
      "name": "User"
    },
    {
      "name": "Review"
    },
    {
      "name": "Book"
    },
    {
      "name": "Author"
    },
    {
      "name": "File"
    }
  ]
}