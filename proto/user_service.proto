syntax = "proto3";
package users;
option go_package = "./users;users_pb";

//go:generate mockgen -source=user_service_grpc.pb.go -destination=../mocks/users/user_service_mock.go
service User {
  rpc Login (LoginRequest) returns (LoginResponse);
  rpc UpdateToken (TokenRequest) returns (TokenReply);
  rpc GetUser (UserRequest) returns (UserModel);
  rpc RegisterUser (RegistrationRequest) returns (LoginResponse);
}
//Requests
message LoginRequest {
  // @gotags: validate:"required" example:"admin"
  string login = 1; // Can be presented as login or email
  string password = 2; // @gotags: validate:"required" example:"admin"
}
message TokenRequest {
  string refreshtoken = 1; // @gotags: validate:"required"
}
message UserRequest {
  string id = 1; // @gotags: validate:"primitiveid,required_without_all=Login Email" form:"id"
  string login = 2; // @gotags: validate:"onlyenglish,required_without_all=Id Email" form:"login"
  string email = 3; // @gotags: validate:"required_without_all=Id Login" form:"email"
}
message RegistrationRequest {
  string login = 1; // @gotags: validate:"required,min=4,max=16,onlyenglish"
  string password = 2; // @gotags: validate:"required,min=8,max=32,lowercase,uppercase,digitrequired,specialsymbol"
  string password_repeat = 3; // @gotags: validate:"required,eqfield=Password"
  string email = 4; // @gotags: validate:"required,email"
}
//Responses
message LoginResponse {
  string login = 1;
  repeated string roles = 2;
  string token = 3;
  string refreshtoken = 4;
}
message TokenReply {
  string token = 1 ;// @gotags: example:"token"
  string refreshtoken = 2; // @gotags: example:"refresh token"
}
//Models
message UserModel {
  string id = 1;
  string login = 2;
  string email = 3;
  repeated string roles = 4;
}