syntax = "proto3";
package books;
option go_package = "github.com/reversersed/LitGO-proto/gen/go/books;books_pb";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "genres/genre_service.proto";
import "authors/author_service.proto";

//go:generate mockgen -source=book_service_grpc.pb.go -destination=./mocks/book_service_mock.go
service Book {
    rpc FindBook(FindBookRequest) returns (FindBookResponse){
        option (google.api.http) = {
          get: "/api/v1/book/find"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          summary: "Find book by query";
          description: "Searches books by query with pagination";
        };
    }
    rpc CreateBook(stream CreateBookRequest) returns (CreateBookResponse){
        option (google.api.http) = {
          post: "/api/v1/book"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          summary: "Create book";
          description: "Create new book. Accessible only for authorized users with admin rights.";
          security: {
            security_requirement: {
              key: "bearer"
            }
          }
        };
    }
    rpc GetBook(GetBookRequest) returns (GetBookResponse){
        option (google.api.http) = {
          get: "/api/v1/book"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          summary: "Get book by id";
          description: "Gets book by id or translit name";
        };
    }
    rpc GetBookByGenre(GetBookByGenreRequest) returns (GetBookByGenreResponse){
        option (google.api.http) = {
          get: "/api/v1/book/genre"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          summary: "Get book by genre";
          description: "Gets book by genre id or translit name with pagination";
        };
    }
    rpc GetBookList(GetBookListRequest) returns (GetBookListResponse){
        option (google.api.http) = {
          get: "/api/v1/book/list"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          summary: "Find authors list";
          description: "Get authors by query with pagination";
        };
    }
}
//Requests
message GetBookListRequest {
    // array of authors id to find
    repeated string id = 1; // @gotags: form:"id" validate:"primitiveid,required_without_all=Translit"
    // array of translit names to find
    repeated string translit = 2; // @gotags: form:"translit" validate:"required_without_all=Id"
}
message FindBookRequest {
    // query to find
    string query = 1; // @gotags: form:"query" validate:"max=128"
    // max objects to find
    int32 limit = 2; // @gotags: form:"limit" validate:"required,gte=1,lte=50"
    // page to find
    int32 page = 3; // @gotags: form:"page" validate:"gte=0"
    // minimum rating to find
    float rating = 4; // @gotags: form:"rating" validate:"gte=0,lte=5"
    string sorttype = 5; // @gotags: form:"sorttype" validate:"oneof=Popular Newest"
}
message CreateBookRequest {
    // book name, required, 4 <= length <= 64
    string name = 1; // @gotags: validate:"required,min=4,max=64" form:"Name"
    // description, required, 16 <= length <= 1024
    string description = 2; // @gotags: validate:"required,min=16,max=1024" form:"Description"
    // picture file, required
    bytes picture = 3; // @gotags: validate:"required" form:"Picture"
    // book file, required
    bytes filepath = 4; // @gotags: validate:"required" form:"Book"
    // genre primitive id, required
    string genre = 5; // @gotags: validate:"required,primitiveid" form:"Genre"
    // authors primitive id, at least one required
    repeated string authors = 6; // @gotags: validate:"required,primitiveid" form:"Authors"
    int32 price = 7; // @gotags: validate:"required,gte=0" form:"Price"
}
message GetBookRequest {
    // book's translit name or id to find
    string query = 1; // @gotags: form:"query" validate:"required"
}
message GetBookByGenreRequest {
    // Query can be translit name or genre id
    string query = 1; // @gotags: form:"query" validate:"required"
    string sorttype = 2; // @gotags: form:"sorttype" validate:"oneof=Popular Newest"
    bool onlyhighrating = 3; // @gotags: form:"onlyhighrating"
    int32 limit = 4; // @gotags: form:"limit" validate:"gte=1,lte=50"
    int32 page = 5; // @gotags: form:"page" validate:"gte=0"
}
//Responses
message FindBookResponse {
    repeated BookModel books = 1;
}
message GetBookListResponse {
    repeated BookModel books = 1;
}
message CreateBookResponse {
    BookModel book = 1;
}
message GetBookResponse {
    BookModel book = 1;
}
message GetBookByGenreResponse {
    repeated BookModel books = 1;
}
//Models
message BookModel {
    string id = 1;
    string name = 2;
    string translitname = 3;
    string description = 4;
    string picture = 5;
    string filepath = 6;
    repeated authors.AuthorModel authors = 7;
    genres.CategoryModel category = 8;
    genres.GenreModel genre = 9;
    float rating = 10;
    int32 reviews = 11;
    int32 price = 12;
    int64 published = 13;
    int32 written = 14;
    int32 pages = 15;
}