syntax = "proto3";
package users;
option go_package = "github.com/reversersed/LitGO-proto/gen/go/users;users_pb";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) ={
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
};

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "shared/shared.proto";

//go:generate mockgen -source=user_service_grpc.pb.go -destination=./mocks/user_service_mock.go
service User {
  rpc Auth (shared.Empty) returns (shared.UserCredentials){
    option (google.api.http) = {
      post: "/api/v1/users/auth"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Authenticate user";
      description: "Returns current user's credentials if there is one";
    };
  }
  rpc Login (LoginRequest) returns (LoginResponse){
        option (google.api.http) = {
          post: "/api/v1/users/login"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          summary: "Login user";
          description: "Log in user with provided credentials to get auth and refresh tokens";
      };
    }
  rpc UpdateToken (TokenRequest) returns (TokenReply);
  rpc GetUser (UserRequest) returns (UserModel){
      option (google.api.http) = {
        get: "/api/v1/users"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        summary: "Search user";
        description: "Find user by provided id, login or email. Only one parameter at time allowed.";
    };
  }
  rpc RegisterUser (RegistrationRequest) returns (LoginResponse){
    option (google.api.http) = {
      post: "/api/v1/users/register"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Register user";
      description: "Creates user account with provided credentials and returns auth and refresh tokens to authorize.";
  };
}
}
//Requests
message LoginRequest {
  // @gotags: validate:"required" example:"admin"
  string login = 1; // Can be presented as login or email
  string password = 2; // @gotags: validate:"required" example:"admin"
  bool rememberMe = 3;
}
message TokenRequest {
  string refreshtoken = 1; // @gotags: validate:"required"
}
message UserRequest {
  string id = 1; // @gotags: validate:"primitiveid,required_without_all=Login Email" form:"id"
  string login = 2; // @gotags: validate:"onlyenglish,required_without_all=Id Email" form:"login"
  string email = 3; // @gotags: validate:"required_without_all=Id Login" form:"email"
}
message RegistrationRequest {
  string login = 1; // @gotags: validate:"required,min=4,max=16,onlyenglish"
  string password = 2; // @gotags: validate:"required,min=8,max=32,lowercase,uppercase,digitrequired,specialsymbol"
  string password_repeat = 3; // @gotags: validate:"required,eqfield=Password"
  string email = 4; // @gotags: validate:"required,email"
  bool rememberMe = 5;
}
//Responses
message LoginResponse {
  string id = 1;
  string login = 2;
  repeated string roles = 3;
  string token = 4;
  string refreshtoken = 5;
}
message TokenReply {
  string token = 1 ;// @gotags: example:"token"
  string refreshtoken = 2; // @gotags: example:"refresh token"
}
//Models
message UserModel {
  string id = 1;
  string login = 2;
  string email = 3;
  repeated string roles = 4;
}
message Empty {

}