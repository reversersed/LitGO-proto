syntax = "proto3";
package reviews;
option go_package = "github.com/reversersed/LitGO-proto/gen/go/reviews;reviews_pb";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "shared/shared.proto";

//go:generate mockgen -source=review_service_grpc.pb.go -destination=./mocks/review_service_mock.go
service Review {
    rpc DeleteBookReview(DeleteReviewRequest) returns (DeleteReviewResponse){
        option (google.api.http) = {
          delete: "/api/v1/review/{bookId}/{reviewId}"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          summary: "Deletes book's review";
        };
    }
    rpc CreateBookReview(CreateBookReviewRequest) returns (CreateBookReviewResponse){
        option (google.api.http) = {
          post: "/api/v1/review/book"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          summary: "Adds new review to book";
        };
    }
    rpc CreateReviewReply(CreateReplyRequest) returns (CreateReplyResponse) {
        option (google.api.http) = {
          post: "/api/v1/review/{bookId}/{replyId}/reply"
          body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          summary: "Adds new review to book";
        };
    }
    rpc GetCurrentUserBookReview(GetCurrentUserBookReviewRequest) returns (GetCurrentUserReviewResponse){
        option (google.api.http) = {
          get: "/api/v1/review/{id}/user"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          summary: "Gets current user's review";
        };
    }
    rpc GetBookReviews(GetBookReviewsRequest) returns (GetBookReviewsResponse){
        option (google.api.http) = {
          get: "/api/v1/review/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          summary: "Get reviews of book with provided {id}";
        };
    }
}
//Requests
message DeleteReviewRequest {
    string bookId = 1; // @gotags: form:"bookId" validate:"required,primitiveid"
    string reviewId = 2; // @gotags: form:"reviewId" validate:"required,primitiveid"
}
message GetBookReviewsRequest {
    // Book ID to search reviews of
    string id = 1; // @gotags: form:"id" validate:"required,primitiveid"
    // Page number to search
    int32 page = 2; // @gotags: form:"page" validate:"gte=0"
    // Reviews count per page
    int32 pageSize = 3; // @gotags: form:"pagesize" validate:"gte=1"
    string sort = 4; // @gotags: form:"sort" validate:"oneof=new old"
}
message CreateBookReviewRequest {
    string text = 1; // @gotags: form:"Id" validate:"required"
    float rating = 2; // @gotags: form:"Rating" validate:"required,gte=0,lte=5"
    string bookId = 3; // @gotags: form:"BookId" validate:"required,primitiveid"
}
message GetCurrentUserBookReviewRequest {
    string id = 1; // @gotags: form:"id" validate:"required,primitiveid"
}
message CreateReplyRequest {
    string bookId = 1; // @gotags: form:"bookId" validate:"required,primitiveid"
    string reviewId = 2; // @gotags: form:"reviewId" validate:"required,primitiveid"
    string text = 3; // @gotags: form:"text" validate:"required"
}
//Responses
message DeleteReviewResponse {
  string deletedId = 1;
}
message GetBookReviewsResponse {
    repeated ReviewModel reviews = 1;
}
message CreateBookReviewResponse {
    ReviewModel review = 1;
}
message GetCurrentUserReviewResponse {
    ReviewModel review = 1;
}
message CreateReplyResponse {
    ReviewModel review = 1;
}
//Models
message ReviewModel {
    string id = 1;
    string text = 2;
    int64 created = 3;
    UserModel creator = 4;
    float rating = 5;
    repeated ReviewReplyModel replies = 6;
}
message ReviewReplyModel {
    string id = 1;
    string text = 2;
    int64 created = 3;
    UserModel creator = 4;
}
message UserModel {
    string id = 1;
    string login = 2;
}