syntax = "proto3";
package authors;
option go_package = "github.com/reversersed/LitGO-proto/gen/go/authors;authors_pb";

//go:generate mockgen -source=author_service_grpc.pb.go -destination=./mocks/author_service_mock.go
service Author {
    rpc GetAuthors(GetAuthorsRequest) returns (GetAuthorsResponse){
        option (google.api.http) = {
          get: "/api/v1/authors"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          summary: "Find authors";
          description: "Get authors by id or translit name. Can be multiple";
        };
    }
    rpc FindAuthors(FindAuthorsRequest) returns (GetAuthorsResponse){
        option (google.api.http) = {
          get: "/api/v1/authors/list"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          summary: "Find authors list";
          description: "Get authors by query with pagination";
        };
    }
}
//Requests
message GetAuthorsRequest {
    // array of authors id to find
    repeated string id = 1; // @gotags: form:"id" validate:"primitiveid,required_without_all=Translit"
    // array of translit names to find
    repeated string translit = 2; // @gotags: form:"translit" validate:"required_without_all=Id"
}
message FindAuthorsRequest {
    // query to find
    string query = 1; // @gotags: form:"query" validate:"required"
    // max objects to find
    int32 limit = 2; // @gotags: form:"limit" validate:"required,gte=1,lte=50"
    // page to find
    int32 page = 3; // @gotags: form:"page" validate:"gte=0"
    // rating to find
    float rating = 4; // @gotags: form:"rating" validate:"gte=0,lte=5"
}
//Responses
message GetAuthorsResponse {
    repeated AuthorModel authors = 1;
}
//Models
message Empty {}
message AuthorModel {
    string id = 1;
    string name = 2;
    string translitname = 3;
    string profilepicture = 4;
    string about = 5;
    float rating = 6;
}